name: carAppPipeline

variables:
  - name: clientImageName
    value: "carrentalclient"
  - name: serverImageName
    value: "carrentalserver"
  - name: kubernetesCluster
    value: "carRentalServerKCluster"
  - name: resourceGroup
    value: "Learning"
  - name: appServicePlanName
    value: "carAppServicePlan"
  - name: webAppName
    value: "pekrent"
  - group: carRentalVariables


trigger:
    branches:
        include:
            - main
    paths:
      include:
        - client/**
        - server/**

stages:
  - stage: Determine_Changes
    jobs:
      - job: Check_Changes
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              # Set ClientChanged to true or false based on changes
              if git diff --name-only HEAD~1 | grep '^client/'; then
                echo "##vso[task.setvariable variable=ClientChanged;isOutput=true]true"
              else
                echo "##vso[task.setvariable variable=ClientChanged;isOutput=true]false"
              fi
              
              # Set ServerChanged to true or false based on changes
              if git diff --name-only HEAD~1 | grep '^server/'; then
                echo "##vso[task.setvariable variable=ServerChanged;isOutput=true]true"
              else
                echo "##vso[task.setvariable variable=ServerChanged;isOutput=true]false"
              fi

            displayName: "Check for Client and Server Changes"
        
          # Debugging step to output the values of ClientChanged and ServerChanged


  - stage: Client_Build_and_Deploy
    dependsOn: Determine_Changes
    displayName: "Build and Deploy React Client"
    # condition: eq(dependencies.Determine_Changes.outputs['Check_Changes.ClientChanged'], 'true')
    jobs:
      - job: Build_and_Deploy_Client
        displayName: "Build Next.Js Client"
        pool:
          vmImage: "ubuntu-latest"
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: "20.0"
        
        - script: |
            cd client
            npm install --force
            npm run build
          displayName: "Install Dependencies and Build Client"

        - task: CopyFiles@2
          inputs:
            contents: 'client/.next/**/*'
            targetFolder: '$(Build.ArtifactStagingDirectory)/client'
          displayName: "Copy Build Artifacts"

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)/client'
            artifactName: 'clientBuild'
          displayName: "Publish Client Build Artifacts"

      - job: Deploy_Client
        dependsOn: Build_and_Deploy_Client
        displayName: "Deploy Client to Azure Web App"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureWebApp@1
            inputs:
              appType: 'webAppLinux'
              azureSubscription: 'azureResourceConnection'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/clientBuild/.next.zip'
            displayName: "Deploy Client to Azure Web App"

  - stage: Server_Build_and_Deploy
    displayName: "Build and Deploy .Net Server"
    dependsOn: Determine_Changes
    # condition: eq(dependencies.Determine_Changes.outputs['Check_Changes.ServerChanged'], 'true')
    jobs:
      - job: Build_Server
        displayName: "Build and Push Server Container"
        steps:
          - checkout: self

          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "8.x"
            displayName: "Set up .Net Core SDK for Server"

          - task: Docker@2
            inputs:
              command: login
              containerRegistry: carRentalRegistryConnection

          - task: Docker@2
            inputs:
              command: "buildAndPush"
              repository: '$(serverImageName)'
              Dockerfile: 'server/Dockerfile'
              tags: |
                latest
            displayName: "Build and Push Server Container"
        
      - job: Deploy_Server
        displayName: "Deploy Server to Kubernetes"
        dependsOn: Build_Server
        steps:
          - download: current

          - task: AzureCLI@2
            inputs:
              azureSubscription: azureResourceConnection
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl get namespace production || kubectl create namespace production

                az aks get-credentials --resource-group Learning --name carRentalServerKCluster --overwrite-existing
                kubectl apply -f server/k8s/deployment.yaml
                kubectl apply -f server/k8s/service.yaml
            displayName: "Deploy Server to Kubernetes Using Azure CLI"
            

