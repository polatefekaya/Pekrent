name: carAppPipeline

variables:
  - name: clientImageName
    value: "carRentalClient"
  - name: serverImageName
    value: "carRentalServer"
  - name: kubernetesCluster
    value: "carRentalServerKCluster"
  - name: resourceGroup
    value: "Learning"
  - group: carRentalVariables


trigger:
    branches:
        include:
            - main
    paths:
      include:
        - client/**
        - server/**

stages:
  - stage: Determine_Changes
    jobs:
      - job: Check_Changes
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              # Set ClientChanged to true or false based on changes
              if git diff --name-only HEAD~1 | grep '^client/'; then
                echo "##vso[task.setvariable variable=ClientChanged;isOutput=true]true"
              else
                echo "##vso[task.setvariable variable=ClientChanged;isOutput=true]false"
              fi
              
              # Set ServerChanged to true or false based on changes
              if git diff --name-only HEAD~1 | grep '^server/'; then
                echo "##vso[task.setvariable variable=ServerChanged;isOutput=true]true"
              else
                echo "##vso[task.setvariable variable=ServerChanged;isOutput=true]false"
              fi

            displayName: "Check for Client and Server Changes"
        
          # Debugging step to output the values of ClientChanged and ServerChanged
          - script: |
              echo "ClientChanged: $(ClientChanged)"
              echo "ServerChanged: $(ServerChanged)"
            displayName: "Debug Output Variables"

  - stage: Client_Build_and_Deploy
    dependsOn: Determine_Changes
    displayName: "Build and Deploy React Client"
    condition: eq(dependencies.Determine_Changes.outputs['Check_Changes.ClientChanged'], 'true')
    jobs:
      - job: Build_and_Deploy_Client
        displayName: "Build React Client"
        pool:
          vmImage: "ubuntu-latest"
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: "22.0"
        
        - task: Cache@2
          inputs:
            key: 'npm|$(Agent.OS)|package-lock.json'
            path: '$(Pipeline.Workspace)/node_modules'

        - script: |
            cd client
            npm ci
            npm run build
          displayName: "Install Dependencies and Build Client"

        # - task: Docker@2
        #   inputs:
        #     command: "buildAndPush"
        #     repository: '$(clientImageName)'
        #     Dockerfile: 'client/Dockerfile'
        #     tags: |
        #       $(Build.BuildId)
        #       latest
        #   displayName: "Build and Push Client Container"

        - task: AzureStaticWebApp@0
          inputs:
            app_location: "client/build"
            azure_static_web_apps_api_token: '$(AzureStaticWebAppDeploymentToken)'  # Token from Azure portal
          displayName: 'Deploy Client to Azure Static Web App'

  - stage: Server_Build_and_Deploy
    displayName: "Build and Deploy .Net Server"
    dependsOn: Determine_Changes
    condition: eq(dependencies.Determine_Changes.outputs['Check_Changes.ServerChanged'], 'true')
    jobs:
      - job: Build_Server
        displayName: "Build and Push Server Container"
        steps:
          - checkout: self

          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "8.x"
            displayName: "Set up .Net Core SDK for Server"

          - task: Docker@2
            inputs:
              command: login
              containerRegistry: carRentalRegistryConnection

          - task: Docker@2
            inputs:
              command: "buildAndPush"
              repository: '$(serverImageName)'
              Dockerfile: 'server/Dockerfile'
              tags: |
                ${Build.BuildId}
                latest
            displayName: "Build and Push Server Container"
        
      - job: Deploy_Server
        displayName: "Deploy Server to Kubernetes"
        dependsOn: Build_Server
        steps:
          - download: current

          - task: AzureCLI@2
            inputs:
              azureSubscription: azureResourceConnection
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroup) --name $(kubernetesCluster) --overwrite-existing
                kubectl apply -f server/k8s/deployment.yaml
                kubectl apply -f server/k8s/service.yaml
            displayName: "Deploy Server to Kubernetes Using Azure CLI"
            

